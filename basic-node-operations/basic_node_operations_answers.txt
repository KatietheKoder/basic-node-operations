1. Run the commands sort, wc and uniq on 
the commands.js file. Explain how they work and what the output was.

sort: sort commands.js

            done(data);
            if (err) throw err;
        //we will add the functionality of echo next within the object commandLibrary
        break;
        break;
        commandLibrary.cat(userInputArray.slice(1));
        commandLibrary.echo(userInputArray.slice(1).join(" "));
        const fileName = fullPath[0];
        done(userInput);
        fs.readFile(fileName, (err, data) => {
        });
    "cat": function(fullPath) {
    "echo": function(userInput) {
    //parses the user input to understand which command was typed
    //the cat command
    case "cat":
    case "echo":
    const command = userInputArray[0];
    const userInputArray = userInput.split(" ");
    process.stdout.write('\nprompt > ');
    process.stdout.write(output);
    }
    },
//where we will store our commands
//where we will store the logic of our commands
//write out data
const commandLibrary = {
const fs = require("fs");
function done(output) {
function evaluateCmd(userInput) {
module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;
switch (command) {
}
}
}
};


wc: 
wc commands.js
      44     116    1112 commands.js


uniq commands.js
const fs = require("fs");

//write out data
function done(output) {
    process.stdout.write(output);
    process.stdout.write('\nprompt > ');
}

//where we will store our commands
function evaluateCmd(userInput) {
    //parses the user input to understand which command was typed
    const userInputArray = userInput.split(" ");
    const command = userInputArray[0];
}

switch (command) {
    case "echo":
        //we will add the functionality of echo next within the object commandLibrary
        commandLibrary.echo(userInputArray.slice(1).join(" "));
        break;

    case "cat":
        commandLibrary.cat(userInputArray.slice(1));
        break;
}

//where we will store the logic of our commands
const commandLibrary = {
    "echo": function(userInput) {
        done(userInput);
    },
    //the cat command
    "cat": function(fullPath) {
        const fileName = fullPath[0];
        fs.readFile(fileName, (err, data) => {
            if (err) throw err;
            done(data);
        });
    }

};


2. Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output 
was and why the specific data was outputted.

44 lines, 116 words 1112 bytes
sort | wc commands.js
      44     116    1112 commands.js

6. In this checkpoint, you encountered built-in 
JavaScript methods as well as the new ES6 syntax. 
Review the information below before attempting the programming 
challenge.

function reverseString(inputString) {
   reverseArray = [];
  var splitArray = inputString.split(' ');

  splitArray.forEach( current => {
      reverseArray.push( current.split("").reverse().join("") );
  });

  return reverseArray.join(" ");
}